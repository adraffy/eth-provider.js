const e=(()=>{let e=1;for(;;){let r=128*e;if(!Number.isSafeInteger(r))break;e=r}return e})();function r(e){if(!Number.isSafeInteger(e)||e<0)throw new TypeError(`expected uvarint: ${e}`)}function t(e){r(e);let t=1;for(;e>=128;t++)e=Math.floor(e/128);return t}function s(r,t=0){if(!ArrayBuffer.isView(r))throw new TypeError("expected ArrayBufferView");let s=0,n=1;for(;;){if(t>=r.length)throw new RangeError("buffer overflow");let o=r[t++];if(s+=(127&o)*n,0==(128&o))break;if(n==e)throw new RangeError("uvarint overflow");n*=128}return[s,r.subarray(t)]}function n(e,t,s=0){if(!Array.isArray(e)&&!ArrayBuffer.isView(e))throw new TypeError("expected ArrayLike");for(r(t);;){if(s>=e.length)throw new RangeError("buffer overflow");if(t<128)break;e[s++]=127&t|128,t=Math.floor(t/128)}return e[s++]=t,s}class o extends class{bytes_from_str(e){if("string"!=typeof e)throw new TypeError("expected string");return this.bytes(e)}str_from_bytes(e){if(Array.isArray(e)&&(e=Uint8Array.from(e)),!(e instanceof Uint8Array))throw new TypeError("expected bytes");return this.str(e)}bytes(){throw new TypeError("bug: not implemented")}str(){throw new TypeError("bug: not implemented")}}{constructor(e){super();let r=[...e];if(r.length!==e.length)throw new TypeError("expected UTF16");this.lookup=e,this.map=Object.fromEntries(r.map(((e,r)=>[e,r])))}parse(e){let r=this.map[e];if(void 0===r)throw new TypeError(`invalid digit ${e}`);return r}format(e){return e.reduce(((e,r)=>e+this.lookup[r]),"")}}class i extends o{bytes(e){let{lookup:r}=this,t=r.length,s=e.length,n=new Uint8Array(s),o=0;for(let r of e){let e=this.parse(r);for(let r=0;r<o;r++)e+=n[r]*t,n[r]=e,e>>=8;for(;e>0;)n[o++]=e,e>>=8}for(let t=0;t<s&&e[t]===r[0];t++)o++;return n.subarray(0,o).reverse()}str(e){let r=this.lookup.length,t=[];for(let s of e){for(let e=0;e<t.length;++e){let n=t[e]<<8|s;t[e]=n%r,s=n/r|0}for(;s>0;)t.push(s%r),s=s/r|0}for(let r=0;r<e.length&&0==e[r];r++)t.push(0);return this.format(t.reverse())}}class a extends o{constructor(e,r){super(e),this.w=r}bytes(e,r){let{w:t}=this,s=e.length,n=0,o=0,i=0;for(;r&&s>0&&"="==e[s-1];)--s;let a=new Uint8Array(s*t>>3);for(let r=0;r<s;r++)o=o<<t|this.parse(e[r]),i+=t,i>=8&&(a[n++]=o>>(i-=8)&255);if(o<<8-i&255)throw new Error("wtf");return a}str(e,r){let{w:t,lookup:s}=this,n=(1<<t)-1,o=0,i=0,a="",h=e.length;for(let r=0;r<h;r++)for(o=o<<8|e[r],i+=8;i>=t;)a+=s[o>>(i-=t)&n];for(i&&(a+=s[o<<t-i&n]);r&&a.length*t&7;)a+="=";return a}}const h=new i("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),c="abcdefghijklmnopqrstuvwxyz",f="0123456789"+c,l=new a(c.toUpperCase()+c+f.slice(0,10)+"+=",6),u=new a(c.toUpperCase()+c+f.slice(0,10)+"-_",6),w=new i(f),p=new a(f.slice(0,32),5),b=new a("abcdefghijklmnopqrstuvwxyz234567",5),y=new a(f.slice(0,16),4),d=new i(f.slice(0,10)),m=new a(f.slice(0,8),3);function g(e,...r){return{decode:t=>e.bytes(t,...r),encode:t=>e.str_from_bytes(t,...r)}}const v={0:{...g(new a(f.slice(0,2),1)),name:"base2"},7:{...g(m),name:"base8"},9:{...g(d),name:"base10"},f:{...g(y),case:!1,name:"base16"},F:{...g(y),case:!0,name:"base16upper"},v:{...g(p),case:!1,name:"base32hex"},V:{...g(p),case:!0,name:"base32hexupper"},t:{...g(p,!0),case:!1,name:"base32hexpad"},T:{...g(p,!0),case:!0,name:"base32hexpadupper"},b:{...g(b),case:!1,name:"base32"},B:{...g(b),case:!0,name:"base32upper"},c:{...g(b,!0),case:!1,name:"base32pad"},C:{...g(b,!0),case:!0,name:"base32padupper"},k:{...g(w),case:!1,name:"base36"},K:{...g(w),case:!0,name:"base36upper"},z:{...g(h),name:"base58btc"},m:{...g(l),name:"base64"},M:{...g(l,!0),name:"base64pad"},u:{...g(u),name:"base64url"},U:{...g(u,!0),name:"base64urlpad"},1:{...g(h),name:"base58btc-Identity"},Q:{...g(h),name:"base58btc-CIDv0"}};for(let[e,r]of Object.entries(v))r.prefix=e,v[r.name]=r;function x(e,r){if("string"!=typeof e)throw new TypeError("expected string");r||(r=e[0],e=e.slice(1));let t=v[r];if(!t)throw new Error(`Unknown multibase: ${r}`);return void 0!==t.case&&(e=e.toLowerCase()),t.decode(e)}function E(e,r,t=!0){let s=v[e];if(!s)throw new Error(`Unknown multibase: ${e}`);let n=s.encode(r);return s.case&&(n=n.toUpperCase()),t&&(n=s.prefix+n),n}class _{static from_str(e){return this.from_bytes(x(e))}static from_bytes(e){let r,t;if([r,e]=s(e),[t,e]=s(e),e.length!==t)throw new Error(`expected ${t}, got ${e.length} bytes`);return new this(r,e.slice())}constructor(e,r){this.code=e,this.hash=r}get length(){return t(this.code)+t(this.hash.length)+this.hash.length}get bytes(){let e=new Uint8Array(this.length);return this.write_bytes(e,0),e}write_bytes(e,r=0){return r=n(e,this.code,r),r=n(e,this.hash.length,r),e.set(this.hash,r),r}toJSON(){return{code:this.code,hash:this.hash}}}class A{static from_str(e){if("string"!=typeof e)throw new TypeError("expected string");if(46==e.length&&e.startsWith("Qm"))return this.from_bytes(h.bytes_from_str(e));{let r=x(e);if(18==r[0])throw new Error(`CIDv0 cannot be multibase: ${e}`);return this.from_bytes(r)}}static from_bytes(e){if(!(e instanceof Uint8Array))throw new TypeError("expected Uint8Array");try{if(34==e.length&&18==e[0]&&32==e[1])return new k(_.from_bytes(e));let r;if([r,e]=s(e),1===r){let r;return[r,e]=s(e),new T(r,_.from_bytes(e))}throw new Error(`unsupported version: ${r}`)}catch(e){throw new Error(`Malformed CID: ${e}`,{cause:e})}}toJSON(){return{version:this.version,codec:this.codec,hash:this.hash}}}class k extends A{constructor(e){super(),this.hash=e}get version(){return 0}get codec(){return 112}get length(){return this.hash.bytes.length}get bytes(){return this.hash.bytes}upgrade_v0(){return new T(this.codec,this.hash)}toString(e){if(void 0!==e&&"Q"!==e)throw new TypeError("expected base Q");return E("Q",this.bytes,!1)}}class T extends A{constructor(e,r){super(),this.codec=e,this.hash=r}get version(){return 1}get length(){return t(this.version)+t(this.codec)+this.hash.length}get bytes(){let e=new Uint8Array(this.length),r=0;return r=n(e,this.version,r),r=n(e,this.codec,r),this.hash.write_bytes(e,r),e}upgrade_v0(){return this}toString(e){if(void 0===e)if(114===this.codec)e="k";else e="b";return E(e,this.bytes,!0)}}export{A as CID,k as CIDv0,T as CIDv1,x as decode_multibase,E as encode_multibase};
